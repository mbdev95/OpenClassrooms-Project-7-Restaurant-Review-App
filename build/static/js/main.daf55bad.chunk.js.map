{"version":3,"sources":["img/star.svg","Components/Map.js","Components/Filter.js","Components/RestaurantList.js","Components/Restaurants.js","Components/Main.js","img/fork-and-knife.svg","Components/Header.js","img/martini.svg","img/miso-soup.svg","img/pizza.svg","img/spaghetti.svg","Components/Footer.js","Components/App.js","reportWebVitals.js","index.js"],"names":["Map","props","restaurants","showAllRestaurants","addedRestInfo","reviewToAddMap","isLoaded","useJsApiLoader","id","googleMapsApiKey","React","useState","position","setPosition","navigator","geolocation","getCurrentPosition","lat","coords","latitude","lng","longitude","permissions","query","name","then","res","state","alert","totalRestaurantList","setTotalRestaurantList","useEffect","restaurantSearchUrl","url","axios","get","response","arrayRest","data","results","forEach","restaurant","restaurantReviewsSearch","place_id","resp","push","result","length","googlePlacesRestaurants","refinedGoogleRestaurants","map","finalAddComp","address_components","long_name","restaurantRating","undefined","rating","restaurantReviews","reviews","address","replace","geometry","location","long","finalRestaurantArray","JSONRestaurants","combinedRestaurantArrays","catch","error","console","log","handleRestaurantSearch","setMap","onLoad","useCallback","onUnmount","displayRestInfo","setDisplayRestInfo","displayRestPhoto","setDisplayRestPhoto","starHighlight","starPosition","Math","round","reviewYellowStars","numberStars","addRestaurantForm","setAddRestaurantForm","newlyAddedRest","parseFloat","className","mapContainerStyle","height","width","center","zoom","onClick","event","Va","latLng","onDrag","onCloseClick","htmlFor","type","placeholder","nameInput","document","getElementById","addressInput","preventDefault","value","addedRestaurantInfo","mapAddedRestInfo","updatedMapRest","concat","addedRestInfoForMap","index","icon","alt","src","star","reviewsToAddToCurrentRestaurant","filter","review","restName","removeAccents","require","clean","text","memo","Filter","starNumber","this","role","filterRestaurants","totalRestaurantArray","setState","Component","RestaurantList","restArray","totalRestaurantListBool","setTotalRestaurantListBool","newReview","totalRestPlusAddedRest","restaurantToBeAdded","setRestaurantToBeAdded","addedStarRating","setAddedStarRating","newReviewsToAdd","setNewReviewsToAdd","Star","i","tabIndex","aria-labelledby","style","display","getElementsByTagName","rows","onFocus","onBlur","totalNewReviews","marginTop","getElementsByClassName","border","borderTop","borderBottom","flexDirection","Restaurants","ra","Main","filteredRestaurants","bool","filteredRestArray","addRestInfo","Header","forkKnife","Footer","martini","misoSoup","pizza","spaghetti","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.daf55bad.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/star.3e8d035f.svg\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {GoogleMap, Marker, useJsApiLoader, InfoWindow} from '@react-google-maps/api';\r\nimport axios from 'axios';\r\nimport JSONRestaurants from \"../restaurants.json\";\r\nimport star from \"../img/star.svg\";\r\n \r\nconst Map = (props) => {\r\n\r\n    const {\r\n        restaurants,\r\n        showAllRestaurants,\r\n        addedRestInfo,\r\n        reviewToAddMap\r\n    } = props\r\n\r\n    // Loads the google maps JS Api after html and css has loaded to ensure the user views a web page before loading the api.\r\n    const { isLoaded } = useJsApiLoader({\r\n       id: 'restaurant-locator-308917',\r\n       googleMapsApiKey: \"AIzaSyBdSWlQIWlDeN2S1glNMA4zYYRQEWA1qyg\"\r\n    })\r\n\r\n    // The map height and width is set to 100% of it's parent's height and width.\r\n    const containerStyle = {\r\n        height: \"100%\",\r\n        width: \"100%\"\r\n    };\r\n\r\n    // A function to deal with error resulting from a browser not having location permissions enabled.\r\n    const error = () => {\r\n        if (navigator.permissions) {\r\n            navigator.permissions.query({ name: 'geolocation' }).then(res => {\r\n                if (res.state === 'denied') {\r\n                alert('Enable location permissions for this website in your browser settings.')\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    //Using state to hold the user's location, and if geolocation is not supported an alert appears informing the user.\r\n    const [position, setPosition] = React.useState({});\r\n    if ( navigator.geolocation ) {\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n            setPosition(\r\n                {\r\n                    lat: position.coords.latitude,\r\n                    lng: position.coords.longitude\r\n                }\r\n            )\r\n        }, error )\r\n    } else {\r\n        alert(\"Your browser currently does not support geolocation.  Please use a different browser.\");\r\n    }\r\n\r\n    // The state of the totalRestaurantList used to hold all the restaurant's information in objects is initialized to an empty array.\r\n    const [totalRestaurantList, setTotalRestaurantList] = React.useState([]);\r\n    \r\n    // The useEffect react hook is used to load each restaurant as an object with information obtained from the google maps API, and subsequently the google places api upon page load once the google map has mounted for the first time.  \r\n    // The useEffect hook only runs once due to the empty dependency array.\r\n    React.useEffect( () => \r\n\r\n        {\r\n    /* combinedRestaurantArrays()\r\n    - Arguement - googlePlacesRestaurants - An array of restaurant's obejcts loaded from the googlePlacesApi which is loaded using the restaurants googlePlaces id loaded from the google maps Api.\r\n    - Results - The googlePlacesRestaurants array is maped through returning an array of objects to the refinedGoogleRestaurants variable, and contains all the required information for the restaurant's marker's location and the restaurant's infowindow.\r\n        - The address is formed by taking the minimum address length and then concacting the remainder of the address components on the basis of the number of address components remaining.\r\n        - The JSON restaurants and google api restaurants are combined into one array using the spread operator.  The resulting array then becomes the state for totalRestaurantList.\r\n    */\r\n            const combinedRestaurantArrays = (googlePlacesRestaurants) => {\r\n                const refinedGoogleRestaurants = googlePlacesRestaurants.map( (restaurant) => {\r\n                        let finalAddComp = \"\";\r\n                        if ( restaurant.address_components.length === 5 ) {\r\n                            finalAddComp = `, ${restaurant.address_components[4].long_name}`;\r\n                        }\r\n                        else if ( restaurant.address_components.length === 6 ) {\r\n                            finalAddComp = `, ${restaurant.address_components[4].long_name}, ${restaurant.address_components[5].long_name}`;\r\n                        } else if ( restaurant.address_components.length === 7 ) {\r\n                            finalAddComp = `, ${restaurant.address_components[4].long_name}, ${restaurant.address_components[5].long_name}, ${restaurant.address_components[6].long_name}`;\r\n                        } else if ( restaurant.address_components.length === 8 ) {\r\n                            finalAddComp = `, ${restaurant.address_components[4].long_name}, ${restaurant.address_components[5].long_name}, ${restaurant.address_components[6].long_name}, ${restaurant.address_components[7].long_name}`;\r\n                        } else if ( restaurant.address_components.length === 9 ) {\r\n                            finalAddComp = `, ${restaurant.address_components[4].long_name}, ${restaurant.address_components[5].long_name}, ${restaurant.address_components[6].long_name}, ${restaurant.address_components[7].long_name}, ${restaurant.address_components[8].long_name}`;\r\n                        } else {\r\n                            finalAddComp = ``;\r\n                        }\r\n                        let restaurantRating = 0;\r\n                        if ( restaurant.rating !== undefined ) {\r\n                            restaurantRating = restaurant.rating;\r\n                        }\r\n                        let restaurantReviews = [];\r\n                        if ( restaurant.reviews !== undefined ) {\r\n                            restaurantReviews = restaurant.reviews;\r\n                        }\r\n                        return (\r\n                            {\r\n                                name: restaurant.name,\r\n                                address: `${restaurant.address_components[0].long_name.replace(\"#\", \"\")} ${restaurant.address_components[1].long_name}, ${restaurant.address_components[2].long_name}, ${restaurant.address_components[3].long_name}${finalAddComp}`,\r\n                                lat: restaurant.geometry.location.lat,\r\n                                long: restaurant.geometry.location.lng,\r\n                                rating: restaurantRating,\r\n                                reviews: restaurantReviews\r\n                            }\r\n                        )\r\n                    }\r\n                );\r\n                const finalRestaurantArray = [...JSONRestaurants, ...refinedGoogleRestaurants];\r\n                setTotalRestaurantList(finalRestaurantArray);\r\n            };\r\n\r\n    /* handleRestaurantSearch()\r\n        - RESULT - The combinedRestaurantArray() function is called with an array of objects containing each restaurants required information is passed through as the arguement.\r\n            -Immediantly after this function declaration the handleRestaurantSearch() function is called inorder to have the function executed once upon the first rendering of the map component.\r\n    */\r\n            const handleRestaurantSearch = () => {\r\n\r\n    //A function to deal with error resulting from a browser not having location permissions enabled.\r\n                const error = () => {\r\n                    if (navigator.permissions) {\r\n                        navigator.permissions.query({ name: 'geolocation' }).then(res => {\r\n                            if (res.state === 'denied') {\r\n                                alert('Enable location permissions for this website in your browser settings.')\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n\r\n    // If geolocation is present in the browser then the googleMaps Api is executed.\r\n    // The latitude and longitude variables are set to there values given from the position arguement passed into the function using the browser's geolocation feature.\r\n    // A google maps api uses the latitude and longitude variables to determine the location from which to locate the restaurants.  The radius is set to 2000 meters and the type is set to restaurant.  The api key is provided and axios is used in conjunction with a get request to return an array of restaurants with a place ID.\r\n    // Herokuapp's server is used to avoid the cors error for the google maps api request and for the google places api request I created my own server \"cors-mbdev\" to deal with any cors errors since the app's requests exceeded the minimum allowed by herokuapp. \r\n    // A new array is initialized and the results of the previous google maps api are iterated through.  The place id is used in each iteration to target and return more information from each restaurant which is then pushed into the initialized array.\r\n    //  The arrayRest has the length of the initial array from google maps api then the array rest has all the restaurants information and thus this array is passed to combinedRestaurantArrays so this array can be used to ultimately update the totalRestaurantList.\r\n    // If the promise recieves an error the error is logged to the console, and if geolocation does not work an alert appears informing the user their browser does not have geolocation.\r\n                let latitude;\r\n                let longitude;\r\n                if ( navigator.geolocation ) {\r\n                    navigator.geolocation.getCurrentPosition((position) => {\r\n                        latitude = position.coords.latitude;\r\n                        longitude = position.coords.longitude;\r\n                        const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?`;\r\n                        const location = `location=${latitude},${longitude}`;\r\n                        const radius = `&radius=2000`;\r\n                        const type = `&type=restaurant`;\r\n                        const key = `&key=AIzaSyBdSWlQIWlDeN2S1glNMA4zYYRQEWA1qyg`;\r\n                        const restaurantSearchUrl = url + location + radius + type + key;\r\n                        axios.get(\"https://secret-ocean-49799.herokuapp.com/\" + restaurantSearchUrl)\r\n                        .then(response => {  \r\n                            const arrayRest = [];                              \r\n                            response.data.results.forEach( restaurant => {\r\n                                const url = `https://maps.googleapis.com/maps/api/place/details/json?`;\r\n                                const place_id = `place_id=${restaurant.place_id}`;\r\n                                const fields = `&fields=name,address_component,geometry,rating,reviews`;\r\n                                const language =`&language=en`;\r\n                                const key = `&key=AIzaSyBdSWlQIWlDeN2S1glNMA4zYYRQEWA1qyg`;\r\n                                const restaurantReviewsSearch = url + place_id + fields + language + key;\r\n                                axios.get(\"https://cors-mbdev.herokuapp.com/\" + restaurantReviewsSearch)\r\n                                .then(resp => {\r\n                                    arrayRest.push(resp.data.result);\r\n                                    if ( arrayRest.length === response.data.results.length ) {\r\n                                        combinedRestaurantArrays(arrayRest);\r\n                                    }\r\n                                })\r\n                                .catch(error => console.log(error));\r\n                            })\r\n                        } ).catch(error => console.log(error));\r\n                    }, error);\r\n                } else {\r\n                    alert(\"Your browser currently does not support geolocation.  Please use a different browser.\");\r\n                } \r\n                \r\n            }\r\n\r\n            handleRestaurantSearch();\r\n\r\n        }, []\r\n\r\n    );\r\n\r\n    /* filteredRestaurantsArray()\r\n    - RESULT - The information for the restaurant markers to be displayed on the map and their respective infowindows are returned based on a series of condition.\r\n        - Condition 1 determines if the filter has been used, and if the rating selected matches the rating of any restaurants. If true the restaurants which have the same rating as the rating selected will be returned.\r\n        - Also after condition 1 is true a further if else statement will determine if the restaurant was newly added or not and if newly added the location is given by the click event position property as opposed to the lat/lng properties for restaurants originally taken from the google maps api.\r\n        - Condition 2 determines if the filter has been used, and will only be true if the rating selected yields no restaurants, thus returning an empty array.\r\n        - Condition 3 determines if the filter has been used, and will only be true if the filter was not used returning all the restaurants.\r\n    */\r\n    const filteredRestaurantsArray = () => {\r\n        if ( restaurants.length > 0 && showAllRestaurants === false ) {\r\n            const refinedGoogleRestaurants = restaurants.map( (restaurant) =>\r\n                { \r\n                    if ( restaurant.newlyAddedRest ) {\r\n                        return (\r\n                          {\r\n                            name: restaurant.name,\r\n                            address: restaurant.address,\r\n                            position: restaurant.position,\r\n                            rating: restaurant.rating,\r\n                            reviews: restaurant.reviews,\r\n                            newlyAddedRest: true\r\n                          }  \r\n                        )\r\n                    } else {\r\n                        return (\r\n                            {\r\n                                name: restaurant.name,\r\n                                address: restaurant.address,\r\n                                lat: restaurant.lat,\r\n                                long: restaurant.long,\r\n                                rating: restaurant.rating,\r\n                                reviews: restaurant.reviews,\r\n                                newlyAddedRest: false\r\n                                \r\n                            }\r\n                        )\r\n                    } \r\n                }\r\n            );\r\n            return refinedGoogleRestaurants\r\n        } else if ( restaurants.length === 0 && showAllRestaurants === false ) {\r\n            return [];\r\n        } else if ( showAllRestaurants === true ) {\r\n            return totalRestaurantList;\r\n        }\r\n    }\r\n\r\n    // The map state is set to null originally.\r\n    const [map, setMap] = React.useState(null)\r\n  \r\n    // On page load the map state is set to the map arguement passed in through the callback.\r\n    const onLoad = React.useCallback(function callback() {  \r\n       setMap(map)\r\n    }, [])\r\n\r\n    // When the map unmounts the map state returns to null.\r\n    const onUnmount = React.useCallback(function callback(map) {\r\n       setMap(null)\r\n    }, [])\r\n\r\n    // State to display the information for each restaurant's marker clicked on which pertains to the iteration of that restaurant from the filteredRestaurantsArray() returned array value.\r\n    const [displayRestInfo, setDisplayRestInfo] = React.useState(null);\r\n\r\n    // State to hold the url needed to access the google street photo of the restaurant's marker which was clicked on.\r\n    const [displayRestPhoto, setDisplayRestPhoto] = React.useState(\"\");\r\n\r\n    /* starHighlight()\r\n    - ARGUEMENT - starPosition - the position of the star in the grouping of 5 stars in the restaurant's infowindow.\r\n    - RESULT - If the starPostion is less than or equal to the rating of the restaurant clicked on the star image is given the class of \"yellowStar\" and thus colored yellow, otherwise the star image will appear uncoloured.\r\n    */\r\n    const starHighlight = (starPosition) => {\r\n        if ( starPosition <= Math.round(displayRestInfo.rating) ) {\r\n            return \"yellowStar\";\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /* reviewYellowStars()\r\n    - ARGUEMENT - numberStars - The rating for an individual review in the restaurant's infowindow.\r\n    - ARGUEMENT - starPosition - The position of the star's image in the grouping of stars in an individual's review in the infowindow.\r\n    - RESULT - If the individual's review's rating is less than or equal to the star's position then the star is coloured yellow otherwise the star remains unchanged in colour.\r\n    */\r\n    const reviewYellowStars = (numberStars, starPosition) => {\r\n        if ( starPosition <= numberStars ) {\r\n            return \"yellowStar\";\r\n        } else {          \r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /* addedRestInfoForMap()\r\n    - ARGUEMENT - mapAddedRestInfo - The newly added restaurant's information object with name and address info obtained from the form field's values and the result of the location function below.\r\n    - RESULT - The new restaurant's object is concated with the totalRestaurantList into one new totalRestaurantList array. The new array is returned as the value for the totalRestaurantList state.\r\n    */\r\n    const addedRestInfoForMap = mapAddedRestInfo => {\r\n        const updatedMapRest = totalRestaurantList.concat(mapAddedRestInfo);\r\n        setTotalRestaurantList(updatedMapRest);\r\n    }\r\n\r\n    // The addRestaurantForm state is initialized to null and will cause a form infowindow to appear upon a map click.\r\n    const [addRestaurantForm, setAddRestaurantForm] = React.useState(null);\r\n\r\n    /* location()\r\n    - ARGUEMENT - restaurant - The restaurant information object pertaining to the marker that was clicked on.\r\n    - RESULT - The location object is returned with lat and long as a position property if the restaurant was newly added by the user using the form since newly added restaurants have a position object based on where the click occured to add the newly added restaurant. Otherwise if the restaurant is originally loaded by the api the lat and lng found in the restaurant's information object are used to give the location of the marker. \r\n    */\r\n    const location = (restaurant) => {\r\n        let location;\r\n        restaurant.newlyAddedRest ? location = restaurant.position : \r\n        location = {\r\n            lat: parseFloat(restaurant.lat),\r\n            lng: parseFloat(restaurant.long)\r\n        }\r\n        return location; \r\n    }\r\n\r\n    /* restaurantReviews()\r\n    - ARGUEMENT - restaurant - The restaurant information object pertaining to the marker that was clicked on.\r\n    - RESULT - The reviewToAddMap prop contains any newly added reviews plus any other existing reviews from the restaurant which had a review added by the user.\r\n        - The reviewToAddMap is filtered on the basis of the restaurant whose marker was clicked on's name and the name of the restaurant which has had a review added being the same. If the same then all the reviews from the restaurant with added review will be placed in the reviewsToAddToCurrentRestaurant variable.\r\n        - If reviews were added to the restaurant being iterated through then the reviewsToAddToCurrentRestaurant array is returned and the reviews including the review added by the user are rendered to the restaurant's infowindow.\r\n        - If no reviews were added to the restaurant being iterated through then the restaurant's original reviews are returned without any additional reviews.\r\n    */\r\n    const restaurantReviews = (restaurant) => {\r\n        const reviewsToAddToCurrentRestaurant = reviewToAddMap.filter(review => restaurant.name === review.restName);\r\n        if ( reviewsToAddToCurrentRestaurant.length > 0 ) {\r\n            return reviewsToAddToCurrentRestaurant;\r\n        } else {\r\n            return restaurant.reviews;\r\n        }\r\n    }\r\n\r\n    // If the page is loaded return the map module otherwise return an empty module.\r\n    return isLoaded ? (\r\n        <div className=\"col-md-8 map\">\r\n        {/* - If the click event is not undefined give the add restaurant form a location value based off of the click location which will trigger the add restaurant form infowindow to appear. */}\r\n            <GoogleMap\r\n                mapContainerStyle={containerStyle}\r\n                center={ position }\r\n                zoom={15}\r\n                onLoad={onLoad}\r\n                onUnmount={onUnmount}\r\n                onClick={ event =>  \r\n                    { \r\n                        setDisplayRestInfo(null);\r\n                        if ( event.Va !== undefined ) {\r\n                            setAddRestaurantForm(event.latLng);\r\n                        } \r\n                    }\r\n                }\r\n                onDrag={ () => \r\n                    {\r\n                        setDisplayRestInfo(null);\r\n                        setAddRestaurantForm(null);\r\n                    }\r\n                }\r\n            >\r\n    {/* - When the user's marker is clicked the restataurant's infowindow and add restaurant form window are closed. The position of the marker is found using the browser's geolocation.*/}\r\n                <Marker \r\n                    position={ position } \r\n                    onClick={ () => {\r\n                            setDisplayRestInfo(null);\r\n                            setAddRestaurantForm(null);\r\n                        }\r\n                    }\r\n                />\r\n\r\n    {/* -The addRestaurantForm's location comes from the map click event position value stored in the addRestaurantForm state. \r\n    - The submit event default of page reload is prevented and an alert tells the user to fill in all form fields if any fields have zero text.\r\n    - When the submit button is clicked, if all the form fields have text then an array with an object pertaining to the information of the restaurant to be added is created and set to be the state for addedRestInfoForMap and addedRestInfo which will upon a rerender cause both the map and restaurantList to be updated with the new restaurant.\r\n    - The addRestaurantForm state will be set to null closing the add restaurant form window upon the submit button being clicked. */}\r\n                {\r\n                    addRestaurantForm && (\r\n                        <InfoWindow\r\n                            onCloseClick={() => setAddRestaurantForm(null)}                   \r\n                            position={addRestaurantForm}\r\n                        >\r\n                            <form>\r\n                                <h5>Add A New Restaurant</h5>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"restaurantName\"><strong>Restaurant Name<span>&#x3a;</span></strong></label>\r\n                                    <input type=\"name\" className=\"form-control\" id=\"restaurantName\" placeholder=\"Enter restaurant name\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"restaurantAddress\"><strong>Restaurant Address<span>&#x3a;</span></strong></label>\r\n                                    <input type=\"address\" className=\"form-control\" id=\"restaurantAddress\" placeholder=\"Enter restaurant address\" />\r\n                                </div>\r\n                                <button type=\"submit\" className=\"btn btn-primary\" onClick={ (event) => {\r\n                                    const nameInput = document.getElementById(\"restaurantName\");\r\n                                    const addressInput = document.getElementById(\"restaurantAddress\");\r\n                                    event.preventDefault();\r\n                                    if ( nameInput.value === \"\" || addressInput.value === \"\" ) {\r\n                                        alert(\"Please fill in an address and name for the restaurant before adding the restaurant.\");\r\n                                    } else {\r\n                                        const addedRestaurantInfo = [\r\n                                            {\r\n                                                id: totalRestaurantList.length + 1,\r\n                                                name: nameInput.value,\r\n                                                address: addressInput.value,\r\n                                                position: addRestaurantForm,\r\n                                                rating: 0,\r\n                                                reviews: [],\r\n                                                newlyAddedRest: true\r\n                                            }\r\n                                        ]\r\n                                        addedRestInfoForMap(addedRestaurantInfo);\r\n                                        addedRestInfo(addedRestaurantInfo);\r\n                                        setAddRestaurantForm(null);\r\n                                    }\r\n                                } } >Add Restaurant</button>\r\n                            </form>\r\n                        </InfoWindow>\r\n                    )\r\n                }\r\n\r\n    {/* - The returned array from the filteredRestaurantsArray() function is iterated through using the map method.  \r\n    - For each iteration a marker will appear on the map at the location specified by the location function's returned location value, either a lat lng or a click events position property depending on if the restaurant was added by the user or came from an api get request. \r\n    - A click event listener is added to each marker which when cliked will set displayRestInfo from null to the restaurant's information object of that iteration, and will generate an image of the restaurant of the current iteration to be used in the infowindow. Any current restaurant infowindows that are open will be closed by setting addRestaurantForm to null.\r\n    - The marker icon attribute is given a url to make the marker blue to distinguish the marker from the user location's marker*/}\r\n                {\r\n                    filteredRestaurantsArray().map((restaurant, index) => {\r\n\r\n                        return (\r\n                            <Marker \r\n                                position={ location(restaurant) }\r\n\r\n                                onClick={ () => \r\n                                    {\r\n                                        setDisplayRestInfo(restaurant);\r\n                                        const url = `https://maps.googleapis.com/maps/api/streetview?`;\r\n                                        const size = `size=210x180`;\r\n                                        const location = `&location=${restaurant.address}`;\r\n                                        const key = `&key=AIzaSyBdSWlQIWlDeN2S1glNMA4zYYRQEWA1qyg`;\r\n                                        const restaurantImage = url + size + location + key;\r\n                                        setDisplayRestPhoto(restaurantImage);\r\n                                        setAddRestaurantForm(null);\r\n                                    }\r\n                                } \r\n\r\n                                key={index}\r\n\r\n                                icon= {\r\n                                    {\r\n                                        url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\r\n                                    }\r\n                                }                         \r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n    {/* - The position comes from the return value of the location() function which will be either a lat lng or a click events position property depending on if the restaurant was added by the user or came from an api get request. \r\n    - The displayRestInfo is set to the restaurant's marker that was clicked on's restaurant's info object.  This state is then used to give the information needed for the restaurant's information in the display restaurant form.\r\n    - The displayRestPhoto holds the url of the google street image for the marker's restaurant that was clicked on. \r\n    - The reviews displayed for the restaurant will either come from an array of reviews including the added review if the reviewToAddMap prop has a value and the value's restaurant name corresponds to the displayRestInfo's restaurant's name or else the restaurantReviews() function returns false then simply an array of the reviews from displayRestInfo will be iterated through and returned. */}\r\n                {\r\n                    displayRestInfo && (\r\n                        <InfoWindow\r\n                            onCloseClick={() => setDisplayRestInfo(null)}\r\n                            position= { location(displayRestInfo) }\r\n                        >\r\n                            <div className=\"infoWindow\">\r\n                                <h5><strong>{displayRestInfo.name}</strong></h5>\r\n                                <p>{displayRestInfo.address}</p>\r\n                                <img alt={displayRestInfo.name} src={displayRestPhoto} />\r\n                                <div>\r\n                                    <h5>Rating<span>&#x3a;</span></h5>\r\n                                    <img src={star} alt=\"star\" className={ starHighlight(1) } />\r\n                                    <img src={star} alt=\"star\" className={ starHighlight(2) } />\r\n                                    <img src={star} alt=\"star\" className={ starHighlight(3) } />\r\n                                    <img src={star} alt=\"star\" className={ starHighlight(4) } />\r\n                                    <img src={star} alt=\"star\" className={ starHighlight(5) } />\r\n                                </div>\r\n                                <h5>Reviews</h5>\r\n                                { \r\n                                    restaurantReviews(displayRestInfo).map( (review, index) => \r\n                                        {\r\n                                            const removeAccents = require(\"diacritic\");\r\n                                            return (\r\n                                                <div className=\"restaurantReview\" key={index}>\r\n                                                    <div>\r\n                                                        <p><strong>Rating<span>&#x3a;</span></strong></p>\r\n                                                        <img src={star} alt=\"star\" className={ reviewYellowStars(review.rating, 1) } />\r\n                                                        <img key={index + 1800} src={star} alt=\"star\" className={ reviewYellowStars(review.rating, 2) } />\r\n                                                        <img key={index + 2400} src={star} alt=\"star\" className={ reviewYellowStars(review.rating, 3) } />\r\n                                                        <img key={index + 3000} src={star} alt=\"star\" className={ reviewYellowStars(review.rating, 4) } />\r\n                                                        <img key={index + 3600} src={star} alt=\"star\" className={ reviewYellowStars(review.rating, 5) } />                                           \r\n                                                    </div>\r\n                                                    <p><strong>Comment<span>&#x3a;</span></strong><span className=\"comment\"> {removeAccents.clean(review.text)}</span></p>\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                    ) \r\n                                }\r\n                            </div>\r\n                        </InfoWindow>\r\n                    )\r\n                }\r\n                <></>\r\n            </GoogleMap>\r\n        </div>\r\n    ): <></>\r\n}\r\n\r\nMap.propTypes = {\r\n    restaurants: PropTypes.array,\r\n    showAllRestaurants: PropTypes.bool,\r\n    addedRestInfo: PropTypes.func,\r\n    reviewToAddMap: PropTypes.array\r\n};\r\n\r\n// The Map component is exported to the Main component.\r\nexport default React.memo(Map);","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport star from \"../img/star.svg\";\r\n\r\nclass Filter extends Component {\r\n\r\n    state = {\r\n        starNumber: 0\r\n    }\r\n\r\n    render() {\r\n\r\n        /* starHighlight()\r\n        - ARGUEMENT - starPosition - starPosition represents the position of a star in the 5 star rating grouping.\r\n        - RESPONSE - If the position of the star is less than or equal to the star clicked then the star will be given the CSS class to make the star appear yellow and thus make the star a part of the rating of the star.\r\n        */\r\n        this.starHighlight = (starPosition) => {\r\n            if ( starPosition <= this.state.starNumber ) {\r\n                return \"yellowStar\";\r\n            } else {\r\n                return \"\";\r\n            }\r\n        }\r\n\r\n        // Every time an image is clicked the filterRestaurants() function from the Main module is called with the arguements of the rating, totalRestaurantArray() including any added restaurants, and a boolean value of false.\r\n        // The showAllRestaurants boolean value of false is used in the Map and RestaurantList in the condition which decides which array to render which will either render all the restaurants or an array of filtered restaurants. \r\n        // When the \"Show All Restaurants\" button is clicked filterRestaurants recieves a rating of 0 and boolean value of true to indicate no rating was selected and since the boolean value for showing all restaurants is true the condition to use the array in the Map and RestaurantList which includes every restaurants will pass causing all restaurants to appear in the RestaurantList module and on the Map module.\r\n        // Also, when the \"Show All Restaurants\" button is clicked the starPosition is set to zero causing all stars to appear unhighlighted and blank since the filter is not being used.\r\n        return (\r\n            <div className=\"filter\">\r\n                <h2>Filter Restaurants</h2>\r\n                <div className=\"alert alert-info\" role=\"alert\">\r\n                    Filter based on a Restaurant<span>&apos;</span>s star rating \r\n                </div>\r\n                <div>\r\n                    <img src={star} alt=\"star\" className={ this.starHighlight(1) } onClick={ () => {\r\n                            this.props.filterRestaurants(1, this.props.totalRestaurantArray, false); \r\n                            this.setState( { starNumber: 1 } );\r\n                        } \r\n                    } />\r\n                    <img src={star} alt=\"star\" className={ this.starHighlight(2) } onClick={ () => {\r\n                            this.props.filterRestaurants(2, this.props.totalRestaurantArray, false);\r\n                            this.setState( { starNumber: 2 } );\r\n                        }\r\n                    } />\r\n                    <img src={star} alt=\"star\" className={ this.starHighlight(3) } onClick={ () => {\r\n                            this.props.filterRestaurants(3, this.props.totalRestaurantArray, false);\r\n                            this.setState( { starNumber: 3 } );\r\n                        }\r\n                    } />\r\n                    <img src={star} alt=\"star\" className={ this.starHighlight(4) } onClick={ () => {\r\n                            this.props.filterRestaurants(4, this.props.totalRestaurantArray, false);\r\n                            this.setState( { starNumber: 4 } );\r\n                        }\r\n                    } />\r\n                    <img src={star} alt=\"star\" className={ this.starHighlight(5) } onClick={ () => {\r\n                            this.props.filterRestaurants(5, this.props.totalRestaurantArray, false);\r\n                            this.setState( { starNumber: 5 } );\r\n                        }\r\n                    } />\r\n                </div>\r\n                <button className=\"btn btn-primary\" onClick={() => {\r\n                        this.props.filterRestaurants(0, this.props.totalRestaurantArray, true);\r\n                        this.setState( { starNumber: 0 } );\r\n                    }\r\n                } >Show All Restaurants</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFilter.propTypes = {\r\n    rating: PropTypes.func\r\n};\r\n\r\n// The Filter module is exported for inclusion in the Main module.\r\nexport default Filter;","import React from \"react\";\r\nimport axios from 'axios';\r\nimport PropTypes from \"prop-types\";\r\nimport JSONRestaurants from \"../restaurants.json\";\r\nimport Star from \"../img/star.svg\";\r\n\r\nconst RestaurantList = (props) => {\r\n\r\n    const {\r\n        restArray,\r\n        restaurants,\r\n        showAllRestaurants,\r\n        addedRestInfo,\r\n        reviewToAddMap\r\n    } = props\r\n\r\n    /* reviewYellowStars()\r\n    - ARGUEMENT - numberStars - The rating for an individual review in the restaurant's infowindow.\r\n    - ARGUEMENT - starPosition - The position of the star's image in the grouping of stars in an individual's review in the infowindow.\r\n    - RESULT - If the individual's review's rating is less than or equal to the star's position then the star is coloured yellow otherwise the star remains unchanged in colour.\r\n    */\r\n    const reviewYellowStars = (numberStars, starPosition) => {\r\n        if ( starPosition <= numberStars ) {\r\n            return \"yellowStar\";\r\n        } else {          \r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    // The state of the totalRestaurantList used to hold all the restaurant's information in objects is initialized to an empty array.\r\n    const [totalRestaurantList, setTotalRestaurantList] = React.useState([]);\r\n\r\n    // A boolean value which if true indicates the total restaurant list array has been created from the api get request.\r\n    const [totalRestaurantListBool, setTotalRestaurantListBool] = React.useState(false);\r\n\r\n    //The useEffect will be executed every time a new restaurant is added via the form by the make this useEffect have an empty dependency array.\r\n    React.useEffect( () => \r\n\r\n        {\r\n    /* combinedRestaurantArrays()\r\n        - Arguement - googlePlacesRestaurants - An array of restaurant's objects loaded from the googlePlacesApi which is loaded using the restaurants googlePlaces id loaded from the google maps Api.\r\n        - Results - The googlePlacesRestaurants array is maped through returning an array of objects to the refinedGoogleRestaurants variable, and contains all the required information for the restaurant's marker's location and the restaurant's infowindow.\r\n        - The address is formed by taking the minimum address length and then concacting the remainder of the address components on the basis of the number of address components remaining.\r\n        - The restaurantReviews object includes the name of the restaurant being reviewed because this name will be needed in a condition comparing the review's restaurant's name with all the restaurant's which have had restaurant's added in order to determine which array of reviews should be rendered to the DOM for each restaurant.\r\n        - The JSON restaurants and google api restaurants are combined into one array using the spread operator.  The resulting array then becomes the state for totalRestaurantList.\r\n        - The totalRestaurantListBool value has been set to true since the api's have loaded all of the information for each restaurant and totalRestaurantList state has been updated with the array containing the restaurant information.  Thus, the restaurantList is ready to be rendered since totalRestaurantList is now an iterable defined array.\r\n        - The restArray prop function takes the value of the totalRestaurants as it's arguement which will then be passed to the filter, and used as another arguement in the filter function to give the filterfunction in Main the most up to date restaurant information, including restaurants just added.  \r\n    */\r\n            const combinedRestaurantArrays = (googlePlacesRestaurants) => {\r\n                const removeAccents = require(\"diacritic\");\r\n                const refinedGoogleRestaurants = googlePlacesRestaurants.map( (restaurant, index) =>\r\n                    {   \r\n                        let finalAddComp = \"\"; \r\n                        if ( restaurant.address_components.length === 6 ) {\r\n                            finalAddComp = `, ${restaurant.address_components[5].long_name}`;\r\n                        } else if ( restaurant.address_components.length === 7 ) {\r\n                            finalAddComp = `, ${restaurant.address_components[5].long_name}, ${restaurant.address_components[6].long_name}`;\r\n                        } else if ( restaurant.address_components.length === 8 ) {\r\n                            finalAddComp = `, ${restaurant.address_components[5].long_name}, ${restaurant.address_components[6].long_name}, ${restaurant.address_components[7].long_name}`;\r\n                        } else if ( restaurant.address_components.length === 9 ) {\r\n                            finalAddComp = `, ${restaurant.address_components[5].long_name}, ${restaurant.address_components[6].long_name}, ${restaurant.address_components[7].long_name}, ${restaurant.address_components[8].long_name}`;\r\n                        } else {\r\n                            finalAddComp = ``;\r\n                        }\r\n                        let restaurantRating = 0;\r\n                        if ( restaurant.rating !== undefined ) {\r\n                            restaurantRating = restaurant.rating;\r\n                        }\r\n                        let restaurantReviews = [];\r\n                        if ( restaurant.reviews !== undefined ) {\r\n                            restaurantReviews = restaurant.reviews.map(review => {\r\n                               return (\r\n                                {\r\n                                    restName: restaurant.name,\r\n                                    rating: review.rating,\r\n                                    text: review.text\r\n                                }\r\n                               )\r\n                           })                        \r\n                        }\r\n                        return (  \r\n                            {\r\n                                place_id: restaurant.place_id,\r\n                                id: index + 9,\r\n                                name: removeAccents.clean(restaurant.name),\r\n                                address: `${restaurant.address_components[0].long_name.replace(\"#\", \"\")} ${restaurant.address_components[1].long_name}, ${restaurant.address_components[2].long_name}, ${restaurant.address_components[3].long_name}, ${restaurant.address_components[4].long_name}${finalAddComp}`,                                lat: restaurant.geometry.location.lat,\r\n                                long: restaurant.geometry.location.lng,\r\n                                newReview: false,\r\n                                rating: restaurantRating,\r\n                                reviews: restaurantReviews\r\n                            }\r\n                        )\r\n                    }\r\n                );\r\n                const finalRestaurantArray = [...JSONRestaurants, ...refinedGoogleRestaurants];\r\n                setTotalRestaurantList(finalRestaurantArray);\r\n                setTotalRestaurantListBool(true);\r\n                restArray(finalRestaurantArray);\r\n            };\r\n    /* handleRestaurantSearch(\r\n    - RESULT - The combinedRestaurantArray() function is called with an array of objects containing each restaurants required information is passed through as the arguement.\r\n        -Immediantly after this function declaration the handleRestaurantSearch() function is called inorder to have the function executed once upon the first rendering of the map component.\r\n    */\r\n            const handleRestaurantSearch = () => {\r\n\r\n                // function to deal with error resulting from a browser not having location permissions enabled\r\n                const error = () => {\r\n                    if (navigator.permissions) {\r\n                        navigator.permissions.query({ name: 'geolocation' }).then(res => {\r\n                            if (res.state === 'denied') {\r\n                                alert('Enable location permissions for this website in your browser settings.')\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n\r\n    // If geolocation is present in the browser then the googleMaps Api is executed.\r\n    // The latitude and longitude variables are set to there values given from the position arguement passed into the function using the browser's geolocation feature.\r\n    // A google maps api uses the latitude and longitude variables to determine the location from which to locate the restaurants.  The radius is set to 2000 meters and the type is set to restaurant.  The api key is provided and axios is used in conjunction with a get request to return an array of restaurants with a place ID.\r\n    // Herokuapp's server is used to avoid the cors error for the google maps api request and for the google places api request I created my own server \"cors-mbdev\" to deal with any cors errors since the app's requests exceeded the minimum allowed by herokuapp. \r\n    // A new array is initialized and the results of the previous google maps api are iterated through.  The place id is used in each iteration to target and return more information from each restaurant which is then pushed into the initialized array.\r\n    // The arrayRest has the length of the initial array from google maps api then the array rest has all the restaurants information and thus this array is passed to combinedRestaurantArrays so this array can be used to ultimately update the totalRestaurantList.\r\n    // If the promise recieves an error the error is logged to the console, and if geolocation does not work an alert appears informing the user their browser does not have geolocation.\r\n                let latitude;\r\n                let longitude;\r\n                if ( navigator.geolocation ) {\r\n                    navigator.geolocation.getCurrentPosition((position) => {\r\n                        latitude = position.coords.latitude;\r\n                        longitude = position.coords.longitude;\r\n                        const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?`;\r\n                        const location = `location=${latitude},${longitude}`;\r\n                        const radius = `&radius=2000`;\r\n                        const type = `&type=restaurant`;\r\n                        const key = `&key=AIzaSyBdSWlQIWlDeN2S1glNMA4zYYRQEWA1qyg`;\r\n                        const restaurantSearchUrl = url + location + radius + type + key;\r\n                        axios.get(\"https://secret-ocean-49799.herokuapp.com/\" + restaurantSearchUrl)\r\n                        .then(response => {  \r\n                            const arrayRest = [];                              \r\n                            response.data.results.forEach( restaurant => {\r\n                                const url = `https://maps.googleapis.com/maps/api/place/details/json?`;\r\n                                const place_id = `place_id=${restaurant.place_id}`;\r\n                                const fields = `&fields=name,place_id,address_component,geometry,rating,review`;\r\n                                const language =`&language=en`;\r\n                                const key = `&key=AIzaSyBdSWlQIWlDeN2S1glNMA4zYYRQEWA1qyg`\r\n                                const restaurantReviewsSearch = url + place_id + fields + language + key;\r\n                                axios.get(\"https://cors-mbdev.herokuapp.com/\" + restaurantReviewsSearch)\r\n                                .then(resp => {\r\n                                    arrayRest.push(resp.data.result);\r\n                                    if ( arrayRest.length === response.data.results.length ) {\r\n                                        combinedRestaurantArrays(arrayRest);\r\n                                    }\r\n                                })\r\n                                .catch(error => console.log(error));\r\n                            })\r\n                        } ).catch(error => console.log(error));\r\n                    }, error);\r\n                } else {\r\n                    alert(\"Your browser currently does not support geolocation.  Please use a different browser.\");\r\n                }                \r\n            }\r\n            handleRestaurantSearch();\r\n        }, []\r\n\r\n    );\r\n\r\n    // - Every time a new list item is submitted the addedRestInfo prop is altered causing the below code to be executed.\r\n    // - The current totalRestaurantList and addedRestInfo are combined into one array and set the new value of state for totalRestaurantList.\r\n    // - The array containing the newly added restaurant is then passed to be included in restaurants being filtered.\r\n    React.useEffect( () => {\r\n            const totalRestPlusAddedRest = [...totalRestaurantList, ...addedRestInfo];\r\n            setTotalRestaurantList(totalRestPlusAddedRest);\r\n        }, [addedRestInfo, restArray]\r\n    );\r\n    \r\n    /* filteredRestaurantsArray() \r\n    - RESULTS - A condition to determine which array of restaurant information will be iterated through to show all the restaurants in the list.\r\n        - Condition 1 determines if the filter has been used, and if the rating selected matches the rating of any restaurants. If true the restaurants which have the same rating as the rating selected will be returned.\r\n        - Condition 2 determines if the filter has been used, and will only be true if the rating selected yields no restaurants, thus returning an empty array.\r\n        - Condition 3 determines if the filter has been used, and will only be true if the filter was not used returning all the restaurants.\r\n    */\r\n    const filteredRestaurantsArray = () => {\r\n        if ( restaurants.length > 0 && showAllRestaurants === false ) {\r\n            return restaurants;\r\n        } else if ( restaurants.length === 0 && showAllRestaurants === false ) {\r\n            return [];\r\n        } else if ( showAllRestaurants === true ) {\r\n            return totalRestaurantList;\r\n        } \r\n    }\r\n\r\n    // - The restaurantToBeAdded state is initialized to an object.  The restaurantToBeAdded represents the restaurant information object pertaining to the restaurant in the restaurant list which had it's add review button clicked so the modal window add review form can be opened. \r\n    // - The restaurant information comes from the object iteration of the filteredRestaurant's array.\r\n    const [restaurantToBeAdded, setRestaurantToBeAdded] = React.useState({});\r\n\r\n    // - The addedStarRating represents the rating a user chooses when they are rating a restaurant.\r\n    const [addedStarRating, setAddedStarRating] = React.useState(0);\r\n\r\n    // - The newReviewsToAdd represents an array of all the reviews for the restaurant which just had a review added.  The reviews array will include the added review.\r\n    const [newReviewsToAdd, setNewReviewsToAdd] = React.useState([]);\r\n\r\n    /* starHighlight()\r\n    - ARGUEMENT - starPosition - The position of the star within the group of 5 stars within the add review modal window.\r\n    - RESULT - If the starPosition is less than or equal to the addedStarRating (the rating the user chose), then the star will be coloured yellow, else the star will be blank.\r\n    */\r\n    const starHighlight = (starPosition) => {\r\n        if ( starPosition <= addedStarRating ) {\r\n            return \"yellowStar\";\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /* restaurantReviews()\r\n    - ARGUEMENT - restaurant - The restaurant information object pertaining to the marker that was clicked on.\r\n    - RESULT - The reviewToAddMap prop contains any newly added reviews plus any other existing reviews from the restaurant which had a review added by the user.\r\n        - The reviewToAddMap is filtered on the basis of the restaurant whose marker was clicked on's name and the name of the restaurant which has had a review added being the same. If the same then all the reviews from the restaurant with added review will be placed in the reviewsToAddToCurrentRestaurant variable.\r\n        - If reviews were added to the restaurant being iterated through then the reviewsToAddToCurrentRestaurant array is returned and the reviews including the review added by the user are rendered to the restaurant's infowindow.\r\n        - If no reviews were added to the restaurant being iterated through then the restaurant's original reviews are returned without any additional reviews.\r\n    */\r\n    const restaurantReviews = (restaurant) => {\r\n        const reviewsToAddToCurrentRestaurant = newReviewsToAdd.filter(review => restaurant.name === review.restName);\r\n        if ( reviewsToAddToCurrentRestaurant.length > 0 ) {\r\n            return reviewsToAddToCurrentRestaurant;\r\n        } else {\r\n            return restaurant.reviews;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"reviewList\">\r\n            <h2>Restaurants</h2>\r\n            <ul className=\"list-group\">\r\n    {/* filteredRestaurantsArray()\r\n    - RESULT - A ternary expression is used to determine if the totalRestaurantList is loaded from the api get requests before loading the page to avoid an undefined error.\r\n        - The filteredRestaurantsArray represents an array representing the restaurants based on 3 conditions determining if the array has been filtered, if the filter has yielded any restaurants, or if the filter has been used at all, in which case all restaurants will be returned.\r\n        - The restaurantReviews() function returns an array of reviews which will either include any added reviews, or include just the original reviews if the condition in the function determines that no reviews were added for the particular restaurant in the current iteration filteredRestaurantsArray() function's returned array.\r\n        - If the add review button is clicked a modal window will appear with a form to add a review for the restaurant the add review button was a part of.  The restaurantToBeAdded state will be updated to the current iteration of the restaurant in the filteredRestaurantsArray() array.  Also a condition will determine if a review to the restaurant has been added and if so the user will be alerted they are not able to add multiple reviews to one restaurant.  The modal window opens by setting the css display value using JS from none to block for the modal window div.\r\n        - If the modal window add review button is clicked and either one or both of the form fields have no text or selection then an alert stating both form fields need to be completed will appear.\r\n        - If the modal window add review button is clicked and both form fields are completed and a restaurant has a rating of two then the rating for that review will become the overall rating since there will only be one rating for an added restaurant. This is achieved by updating the rating property of the added restaurant which had a review added from zero to the rating given by the user.\r\n        - If the modal window add review button is clicked and both form fields are completed then filter will recieve the updated array including the newly added overall rating for the added restaurant.\r\n        - If the modal window add review button is clicked and both form fields are completed then the new review will be added into one array in combination with the existing restaurant's reviews.  The updated restaurant's review array will then be added to any existing restaurant's reviews which have had one restaurant review added.  The combined array of all the restaurants reviews which have had one review added will be set as the state for newReviewsToAdd and additonally passed to the map component as the arguement in the function reviewToAddMap().\r\n        - Upon the closing of the modal window css is manipulated using JS directly to have the modal window display change to none.  Also, the addedStarRating state is set to zero when the modal window is closed or the modal window add review button is clicked so when the modal window reopens the stars appear at zero.   \r\n     */}\r\n                {   \r\n                    totalRestaurantListBool ? filteredRestaurantsArray().map((restaurant, index) => {\r\n                        return (\r\n                            <li className=\"list-group-item\" key={restaurant.id}>\r\n                                <span key={restaurant.id * (index + 1) + 1} className=\"name\">{restaurant.name}</span>\r\n                                <p><span key={restaurant.id * (index + 1) + 2} className=\"address\" >{restaurant.address}</span></p>\r\n                                <div>\r\n                                    <h4>Overall Rating<span>&#x3a;</span></h4>\r\n                                    <img src={Star} alt=\"star\" className={ reviewYellowStars(Math.round(restaurant.rating), 1) } />\r\n                                    <img src={Star} alt=\"star\" className={ reviewYellowStars(Math.round(restaurant.rating), 2) } />\r\n                                    <img src={Star} alt=\"star\" className={ reviewYellowStars(Math.round(restaurant.rating), 3) } />\r\n                                    <img src={Star} alt=\"star\" className={ reviewYellowStars(Math.round(restaurant.rating), 4) } />\r\n                                    <img src={Star} alt=\"star\" className={ reviewYellowStars(Math.round(restaurant.rating), 5) } />\r\n                                </div>\r\n                                <h4 key={restaurant.id * (index + 1) + 3}>Reviews</h4>\r\n                                { \r\n                                    restaurantReviews(restaurant).map((review, i) => {\r\n                                        const removeAccents = require(\"diacritic\");\r\n                                        return (\r\n                                            <div key={restaurant.id * (index + 1) + 4 + i} className=\"restaurantReview\">\r\n                                                <p>Rating<span>&#x3a;</span>\r\n                                                    <img src={Star} alt=\"star\" className={ reviewYellowStars(review.rating, 1) } />\r\n                                                    <img src={Star} alt=\"star\" className={ reviewYellowStars(review.rating, 2) } />\r\n                                                    <img src={Star} alt=\"star\" className={ reviewYellowStars(review.rating, 3) } />\r\n                                                    <img src={Star} alt=\"star\" className={ reviewYellowStars(review.rating, 4) } />\r\n                                                    <img src={Star} alt=\"star\" className={ reviewYellowStars(review.rating, 5) } />\r\n                                                </p>\r\n                                                <p>Comment<span className=\"lead comment\">&#x3a; {removeAccents.clean(review.text)}</span></p>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n\r\n                                <div className=\"modal\" id=\"addReviewModal\" tabIndex=\"-1\" aria-labelledby=\"addReview\">\r\n                                    <div className=\"modal-dialog\">\r\n                                        <div className=\"modal-content\">\r\n                                            <div className=\"modal-header\">\r\n                                                <h4 className=\"modal-title\">{`Add Reviews For ${restaurantToBeAdded.name}`}</h4>\r\n                                                <button type=\"button\" onClick={ () => {\r\n                                                    document.getElementById(\"addReviewModal\").style.display = \"none\";\r\n                                                    document.getElementsByTagName(\"textarea\")[0].value = \"\";\r\n                                                    document.getElementsByTagName(\"textarea\")[0].placeholder = \"Add your review here...\";\r\n                                                    setAddedStarRating(0);\r\n                                                } }>X</button>\r\n                                            </div>\r\n                                            <div className=\"modal-body\">\r\n                                                <div id=\"reviewTextArea\" >\r\n                                                    <div>\r\n                                                        <p>Rating<strong><span>&#x3a;</span></strong></p>\r\n                                                        <img src={Star} alt=\"star\" className={ starHighlight(1) } onClick={ () => setAddedStarRating(1) } />\r\n                                                        <img src={Star} alt=\"star\" className={ starHighlight(2) } onClick={ () => setAddedStarRating(2) } />\r\n                                                        <img src={Star} alt=\"star\" className={ starHighlight(3) } onClick={ () => setAddedStarRating(3) } />\r\n                                                        <img src={Star} alt=\"star\" className={ starHighlight(4) } onClick={ () => setAddedStarRating(4) } />\r\n                                                        <img src={Star} alt=\"star\" className={ starHighlight(5) } onClick={ () => setAddedStarRating(5) } />\r\n                                                    </div>\r\n                                                    <label htmlFor=\"reviewText\">Review Comment<strong><span>&#x3a;</span></strong></label>\r\n                                                    <textarea type=\"text\" id=\"reviewText\" name=\"reviewText\" rows=\"7\" placeholder=\"Add you review here...\" onFocus={ () => document.getElementsByTagName(\"textarea\")[0].placeholder = \"\" } onBlur={ () => document.getElementsByTagName(\"textarea\")[0].placeholder = \"Add you review here...\" } />\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"modal-footer\">\r\n                                                <button type=\"button\" className=\"btn btn-secondary\" onClick={ () => {\r\n                                                    document.getElementById(\"addReviewModal\").style.display = \"none\";\r\n                                                    document.getElementsByTagName(\"textarea\")[0].value = \"\";\r\n                                                    document.getElementsByTagName(\"textarea\")[0].placeholder = \"Add your review here...\";\r\n                                                    setAddedStarRating(0);\r\n                                                } } >Close</button>\r\n                                                <button type=\"button\" className=\"btn btn-primary\" onClick={ () => {\r\n                                                    if ( addedStarRating === 0 && document.getElementsByTagName(\"textarea\")[0].value !== \"\" ) {\r\n                                                        alert(`Please select a rating for ${restaurantToBeAdded.name} before submitting your review.`);\r\n                                                    } else if ( addedStarRating > 0 && document.getElementsByTagName(\"textarea\")[0].value === \"\" ) {\r\n                                                        alert(`Please write a review for ${restaurantToBeAdded.name} before submitting your review.`);\r\n                                                    } else if ( addedStarRating === 0 && document.getElementsByTagName(\"textarea\")[0].value === \"\" ) {\r\n                                                        alert(`Please give a rating and write a review for ${restaurantToBeAdded.name} before submitting your review.`);\r\n                                                    } else if ( addedStarRating > 0 && document.getElementsByTagName(\"textarea\")[0].value !== \"\" ) {\r\n                                                        const newReview = [...totalRestaurantList[restaurantToBeAdded.id - 1].reviews, ...[ \r\n                                                                {\r\n                                                                    restName: restaurantToBeAdded.name,\r\n                                                                    rating: addedStarRating,\r\n                                                                    text: document.getElementsByTagName(\"textarea\")[0].value\r\n                                                                } \r\n                                                            ]\r\n                                                        ]\r\n                                                        if ( totalRestaurantList[restaurantToBeAdded.id - 1].rating === 0 ) {\r\n                                                            totalRestaurantList[restaurantToBeAdded.id - 1].rating = addedStarRating;\r\n                                                            restArray(totalRestaurantList);\r\n                                                        }\r\n                                                        const totalNewReviews = [...newReviewsToAdd, ...newReview];\r\n                                                        setNewReviewsToAdd(totalNewReviews);\r\n                                                        reviewToAddMap(totalNewReviews);\r\n                                                        document.getElementById(\"addReviewModal\").style.display = \"none\";\r\n                                                        document.getElementsByTagName(\"textarea\")[0].value = \"\";\r\n                                                        document.getElementsByTagName(\"textarea\")[0].placeholder = \"Add your review here...\";\r\n                                                        setAddedStarRating(0);\r\n                                                    }\r\n                                                } }>Add Review</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <button type=\"button\" className=\"btn btn-primary btn-open\" onClick={ () => {\r\n                                        if ( newReviewsToAdd.length > 0 && newReviewsToAdd[newReviewsToAdd.length - 1].restName === restaurant.name ) {\r\n                                            alert(\"You can only add one review per restaurant.\");\r\n                                        } else {\r\n                                            document.getElementById(\"addReviewModal\").style.display = \"block\";\r\n                                            document.getElementById(\"addReviewModal\").style.marginTop = \"100px\";\r\n                                            document.getElementsByClassName(\"modal-content\")[0].style.border = \"2px solid black\";\r\n                                            document.getElementsByClassName(\"modal-footer\")[0].style.borderTop = \"1px solid black\";\r\n                                            document.getElementsByClassName(\"modal-dialog\")[0].style.borderBottom = \"none\";\r\n                                            document.getElementById(\"reviewTextArea\").style.borderBottom = \"none\";\r\n                                            document.getElementById(\"reviewTextArea\").style.flexDirection = \"column\";\r\n                                            setRestaurantToBeAdded(restaurant);\r\n                                        }\r\n                                    }\r\n                                } >Add Review</button>\r\n\r\n                            </li>\r\n                        )\r\n                    }\r\n                ) : \"\"\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nRestaurantList.propTypes = {\r\n    restArray: PropTypes.func,\r\n    restaurants: PropTypes.array,\r\n    showAllRestaurants: PropTypes.bool,\r\n    addedRestInfo: PropTypes.array,\r\n    reviewToAddMap: PropTypes.func\r\n}\r\n\r\n//RestaurantList module is exported to the Restaurants module\r\nexport default RestaurantList;","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Filter from \"./Filter.js\";\r\nimport RestaurantList from \"./RestaurantList.js\";\r\n\r\nclass Restaurants extends Component {\r\n\r\n    state = {\r\n        restArray: []\r\n    }\r\n\r\n    /* totalRestaurantArray()\r\n    - ARGUEMENT - The total restaurant array of all the restaurants in the restaurant list.\r\n    - RESULT - The restArray state will become the arguement array of all the restaurants from the restaurantList. This state will be passed down to the filter and then used as the array which is filtered through.  The array which is filtered thus will include any added restaurants since the array is coming from the restaurantList where added restaurants are added to the total restaurant list array.\r\n    */\r\n    totalRestaurantArray = (ra) => {\r\n        this.setState( { restArray: ra } );\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"review col-md-4\">\r\n                <Filter filterRestaurants={this.props.filterRestaurants} totalRestaurantArray={this.state.restArray} />\r\n                <RestaurantList restArray={this.totalRestaurantArray} restaurants={this.props.restaurants} showAllRestaurants={this.props.showAllRestaurants} addedRestInfo={this.props.addedRestInfo} reviewToAddMap={this.props.reviewToAddMap} />\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nRestaurants.propTypes = {\r\n    filterRestaurants: PropTypes.func,\r\n    restaurants: PropTypes.array,\r\n    showAllRestaurants: PropTypes.bool,\r\n    addedRestInfo: PropTypes.array,\r\n    reviewToAddMap: PropTypes.func\r\n};\r\n\r\n// The Restaurants module is exported to be a part of the Main module.\r\nexport default Restaurants;\r\n\r\n","//Main module\r\nimport React, {Component} from \"react\";\r\nimport Map from \"./Map\";\r\nimport Restaurants from \"./Restaurants\";\r\n\r\nclass Main extends Component {\r\n\r\n    state = {\r\n        filteredRestaurants: [],\r\n        showAllRestaurants: true,\r\n        addedRestaurantInfo: [],\r\n        reviewToAddMap: []\r\n    }\r\n\r\n    /*\r\n    filterRestaurants()\r\n    - ARGUEMENT - rating - A number value based off of the clicked star's position in the set of 5 stars used to rate each restaurant.\r\n    - ARGUEMENT - totalRestaurantArray - An array of all the restaurants in the restaurant list including any added restaurants.  \r\n        -This value is lifted from the restaurant list module to the restaurants module, and finally passed down to the filter module as props to be used as this arguement for the filterRestaurants() function.\r\n    - ARGUEMENT - bool - a value altered to false if the filter is used.  \r\n        -The value is set as state in the Main module and passed down to the Map module as props.\r\n        -In the Map module the boolean value is used in a condition to determine if the array of restaurant given to the map to display the markers and infowindow will be the array from this restaurantFilters method or simply the totalRestaurantList array defined in the map Module.\r\n    - RESULT - The totalRestaurantArray is filtered to show only restaurants with the specified rating and the resulting array is set to state in the Main module to represent all the filtered restaurants.\r\n        -This new array becomes the array used in the Map module and RestaurantList module to represent the restaurants which have been filtered based on a specified rating.  This array is then used in the RestaurantList and Map modules as the array to display each restaurants information instead of the totalRestarauntList array composed within each own's module if the filter was used.\r\n        -If the rating selected does not match the overall rating of any restaurants in the totalRestaurantArray then an alert appears indicating no restaurants in the users area have the selected rating.\r\n    */\r\n    filterRestaurants = (rating, totalRestaurantArray, bool) => {\r\n        this.setState( { showAllRestaurants: bool } );\r\n        if ( rating === 1 ) {\r\n            const filteredRestArray = totalRestaurantArray.filter( restaurant => Math.round(restaurant.rating) === 1 );\r\n            this.setState( { filteredRestaurants: filteredRestArray } );\r\n            if ( filteredRestArray.length === 0 ) {\r\n                alert(\"There are no restaurants with the chosen rating. Please choose a different rating.\");\r\n            } \r\n        }\r\n        if ( rating === 2 ) {\r\n            const filteredRestArray = totalRestaurantArray.filter( restaurant => Math.round(restaurant.rating) === 2 );\r\n            this.setState( { filteredRestaurants: filteredRestArray } );\r\n            if ( filteredRestArray.length === 0 ) {\r\n                alert(\"There are no restaurants with the chosen rating. Please choose a different rating.\");\r\n            }\r\n        }\r\n        if ( rating === 3 ) {\r\n            const filteredRestArray = totalRestaurantArray.filter( restaurant => Math.round(restaurant.rating) === 3 );\r\n            this.setState( { filteredRestaurants: filteredRestArray } );\r\n            if ( filteredRestArray.length === 0 ) {\r\n                alert(\"There are no restaurants with the chosen rating. Please choose a different rating.\");\r\n            }\r\n        }\r\n        if ( rating === 4 ) {\r\n            const filteredRestArray = totalRestaurantArray.filter( restaurant => Math.round(restaurant.rating) === 4 );\r\n            this.setState( { filteredRestaurants: filteredRestArray } );\r\n            if ( filteredRestArray.length === 0 ) {\r\n                alert(\"There are no restaurants with the chosen rating. Please choose a different rating.\");\r\n            }\r\n        }\r\n        if ( rating === 5 ) {\r\n            const filteredRestArray = totalRestaurantArray.filter( restaurant => Math.round(restaurant.rating) === 5 );\r\n            this.setState( { filteredRestaurants: filteredRestArray } );\r\n            if ( filteredRestArray.length === 0 ) {\r\n                alert(\"There are no restaurants with the chosen rating. Please choose a different rating.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /* \r\n    addedRestInfo()\r\n    - ARGUEMENT - addRestInfo - An array containing an object with the information of a restaurant given from the add restaurant form in the Map module.\r\n    - RESULT - The Main module's addedRestaurantInfo's state is updated with the newly added restaurant's info.\r\n        -The addedRestaurantInfo's state is then passed down the RestaurantList module as props and added to the totalRestaurantList.\r\n    */\r\n    addedRestInfo = (addRestInfo) => this.setState( { addedRestaurantInfo: addRestInfo } );\r\n    \r\n    /* \r\n    reviewToAddMap()\r\n    - Arguement - review - An array containing the previous reviews object and the newly added review object together in one array taken from the RestaurantList Module.\r\n    - Result - The Main modules state's property of reviewToAddMap is added and this value is passed down to the map.\r\n        -The reviewToAddMap is used in a condition to determine a boolean value based on if there is a new review to be added and if true then the reviewToAddMap array is used instead of the reviews generated by the api request from within the Map module itself.\r\n    */\r\n    reviewToAddMap = (review) => this.setState( { reviewToAddMap: review } );\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main\">\r\n                <div className=\"row no-gutters\">\r\n                    <Map restaurants={this.state.filteredRestaurants} showAllRestaurants={this.state.showAllRestaurants} addedRestInfo={this.addedRestInfo} reviewToAddMap={this.state.reviewToAddMap} />\r\n                    <Restaurants filterRestaurants={this.filterRestaurants} restaurants={this.state.filteredRestaurants} showAllRestaurants={this.state.showAllRestaurants} addedRestInfo={this.state.addedRestaurantInfo} reviewToAddMap={this.reviewToAddMap} />\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n// export main to be a child element of the App module\r\nexport default Main;\r\n","export default __webpack_public_path__ + \"static/media/fork-and-knife.df9508ff.svg\";","import React from \"react\";\r\nimport forkKnife from \"../img/fork-and-knife.svg\"\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n\r\n        <header className=\"d-flex justify-content-around\">\r\n            <div>\r\n                <img src={forkKnife} alt=\"fork and knife\" />\r\n                <img src={forkKnife} alt=\"fork and knife\" />\r\n                <img src={forkKnife} alt=\"fork and knife\" />\r\n            </div>\r\n            <h1>Restaurant Review Finder</h1>\r\n            <div>\r\n                <img src={forkKnife} alt=\"fork and knife\" />\r\n                <img src={forkKnife} alt=\"fork and knife\" />\r\n                <img src={forkKnife} alt=\"fork and knife\" />\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\n// Export Header module to App module.\r\nexport default Header;","export default __webpack_public_path__ + \"static/media/martini.a1616c3f.svg\";","export default __webpack_public_path__ + \"static/media/miso-soup.8c7157a6.svg\";","export default __webpack_public_path__ + \"static/media/pizza.df5d1179.svg\";","export default __webpack_public_path__ + \"static/media/spaghetti.c4a046f8.svg\";","import React from \"react\";\r\nimport star from \"../img/star.svg\";\r\nimport martini from \"../img/martini.svg\"\r\nimport misoSoup from \"../img/miso-soup.svg\";\r\nimport pizza from \"../img/pizza.svg\";\r\nimport spaghetti from \"../img/spaghetti.svg\";\r\n\r\nconst Footer = () => {\r\n\r\n    return (\r\n        <footer>\r\n            <p><span>&copy;</span> Restaurant Review Finder</p>\r\n            <div>\r\n                <img src={star} alt=\"star\" />\r\n                <img src={martini} alt=\"martini\" className=\"foodSvg\" />\r\n                <img src={star} alt=\"star\" />\r\n                <img src={misoSoup} alt=\"miso-soup\" className=\"foodSvg\" /> \r\n                <img src={star} alt=\"star\" /> \r\n                <img src={pizza} alt=\"pizza\" className=\"foodSvg\" />\r\n                <img src={star} alt=\"star\" />\r\n                <img src={spaghetti} alt=\"spaghetti\" className=\"foodSvg\" />\r\n                <img src={star} alt=\"star\" />\r\n            </div>\r\n            <p>Website By Mark Bucholski</p>\r\n        </footer>\r\n    );\r\n}\r\n\r\n//Export Footer module to App module\r\nexport default Footer;","// Application Module\nimport React, {Component} from 'react';\nimport Main from \"./Main.js\";\nimport Header from \"./Header.js\";\nimport Footer from \"./Footer.js\";\n\nclass App extends Component {\n\n  render() {\n\n    // returns header, main - map / restaurants - filter / restaurantList\n    return (\n      <div>\n        <Header />\n        <Main />\n        <Footer />\n      </div>\n    );\n  }\n}\n\n// export application module to index.js\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// import application module and render the appliction module to the DOM\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}